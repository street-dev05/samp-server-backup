/*
 	переделал антирапид, теперь не будет пропускать быстрые выстрелы по типу +с
	переделал систему получения урона, урон от дробовиков теперь зависит от дистанции
 	убрал античит на спавн транспорта по причине ложных срабатываний
	уменьшил разницу во времени для срабатывания антифлуда на OnPlayerPickUpPickup, OnPlayerSelectedMenuRow, OnPlayerClickPlayerTextDraw, OnPlayerClickTextDraw
	добавил антикрашеры AC_CRASH3 и AC_CRASH7 от Passenger Crasher гиганта/опкодера
	переделал систему варнингов у античитов AC_DIFFSPEED и AC_CARSHOT
 	добавил перехват SetVehicleVirtualWorld и LinkVehicleToInterior для установки мира и интерьера игрокам сидящем в транспорте при их установке транспорту
	убрал фикс пикапов за ненадобностью
 	убрал AC_FAKENPC и AC_ICONB нерабочие
  	добавил зищиту на антикапт, который при 25хп убивает игрока дабы не защиталось убийство
   	убрал рассинхрон урона при +с для 24 и 25 оружий, по причине жалоб петухов
	убрал cbug с панели, флудит, слишком много петухов
	добавил чек бота rakbot 0.6.6 by mishan и raksamp by axwell
 	добавил зищиту на смену скина при входе в транспорт, эта фигня вызывает краш
 	добавил зищиту на спавн машин игроком, делаю рассинхрон
 	добавил зищиту на инвиз сурфом на машине, делаю рассинхрон
  	добавил защиту на NaN в aimz, делаю рассинхрон
   	добавил защиту на слапер транспорта, делаю рассинхрон (blast.hk/threads/18491)


	new str1[144];
	format(str1, 144, "dist: %i", dist);
	SendClientMessage(playerid, -1, str1);


	warning panel:
	raksamp - подклчился из под программы (rakbot/raksamp)
	speed - speedhack (> 20)
	proxy - подклчился из под VPN/PROXY
	surf - surf в собе, или cleo
	aim - после определенного количества попаданий подрят, 50\50 может оказатся и не читером
*/
#if defined _cheat_included
	#endinput
#endif
#define _cheat_included

#if !defined AC_MAX_PING
	#define AC_MAX_PING 				(800)
#endif
#if !defined AC_CLIENT_VERSION
	#define AC_CLIENT_VERSION 			"0.3.7"
#endif

#define AC_NULLWARN     (2)
#define AC_WARNLINE     (16)

#define AC_WEAPON 		("gun") 					// оружие
#define AC_AMMO         ("ammo") 					// патроны
#define AC_ARMOUR       ("nop armour") 				// бронь
#define AC_HEALTH       ("nop health") 				// здоровье
#define AC_TP0          ("tp in car") 				// телепорт в транспорт (прохождение большой дистанции (200) за короткий промежуток времени)
#define AC_TP1          ("tp onfoot") 				// телепорт (прохождение большой дистанции (60) за короткий промежуток времени)
#define AC_FLY0         ("fly sbo") 				// fly slonoboyko | coordmaster и другие читы которые перемещаются рывками
#define AC_FLY1         ("fly aev") 				// fly с анимацией езды на велосипеде
#define AC_FLY2         ("fly cap") 				// fly с анимацией плавания
#define AC_FLY3         ("fly app") 				// fly с анимацией прыжка с парашютом
#define AC_FLY4      	("mop") 					// метла
#define AC_VEHREMOVE    ("nop rpveh") 				// ремув из транспорта (если не удалось выгнать, к примеру игрок врубил NOP, кикнет)
#define AC_IKILL     	("fakekill") 				// fake fill от самого себя
#define AC_IKILLER      ("inv kill") 				// fake fill от невалидного игрока
#define AC_ISTATE       ("crash state") 			// краш сменами состояний
#define AC_CARHACK0     ("carhack #1") 				// телепорт в трнспорт (смотрит все места, пасажиров тоже) в таймере
#define AC_CARHACK1     ("carhack #2") 				// телепорт в трнспорт (смотрит все места, пасажиров тоже) в смене состояния
#define AC_CARHACK2     ("carhack #3") 				// телепорт в трнспорт (смотрит время между нажатием на F и входом в транспорт)
#define AC_CARHACK3     ("crash inv pass") 			// краш невалидным пасажирским местом
#define AC_RAPID        ("rapid") 					// rapid (сравнивает время между выстрелами)
#define AC_CARSHOT      ("carshot") 				// carshot (реагирует на ускорение, могут быть ложные)
#define AC_SPEED       	("speed") 					// speedhack (на максимальную скорость, фиксит всякие тараны и другую дичь)
#define AC_IVERSION     ("ver client") 				// версия клиента (если не соотвецтвует той что у сервера то кикнет)
#define AC_MAXCONNIP    ("max conn") 				// подключение с 1 IP (сейчас 4 игрока могут сидеть с 1 IP)
#define AC_SPOOFCONN    ("spoof conn") 				// спуф коннектами (уже вроде эта фигня не работает, но пускай будет)
#define AC_IEMODSHOP    ("inv tune") 				// установка тюнинга вне мастерской, к примеру с помощью собейта
#define AC_IRCON        ("inv rcon") 				// неверный пароль при авторизации в rcon (3 раза)
#define AC_PING         ("max ping") 				// максимальный пинг (если больше 800 кик)
#define AC_IVEHMOD      ("crash tune") 				// краш невалидными частями тюнинга
#define AC_IPAINTJOB    ("crash farb") 				// краш невалидными покрасочными работами
#define AC_INPCLICK     ("inv click") 				// краш невалидным кликом в списке игроков
#define AC_REPAIR       ("nop hpcar") 				// починка транспорта (пытается восстановить здоровье транспорту, потом кик)
#define AC_CRASH1     	("crash bullet") 			// банальный булет крашер 0.3.7
#define AC_RECVPER      ("max packet") 				// ограничение на количество принятых пакетов
#define AC_AIM0 		("silent aim #1") 			// silent aim by opcoder v1..15 | silent aim by izd4t
#define AC_AIM1 		("silent aim #2") 			// silent aim (древних версий, и многие дамагеры)
#define AC_AIM2 		("pro aim") 				// pro aim
#define AC_AIM3 		("silent aim #3") 			// silent aim by opcoder v1..15 | silent aim by izd4t
#define AC_JETPACK      ("jetpack") 				// jetpack, на большенстве игровых модах он запрежен
#define AC_DIFFSPEED    ("speed diff") 				// speedhack (замеряет разницу в скорости, фиксит всякие рванки и другую дичь)
#define AC_SPAWN        ("spawn") 					// если игрок отправил спавн (морозится во время спавна, фиксит различные спавн телепорты)
#define AC_CRASH3     	("crash pass in drive") 	// краш пасажиром
#define AC_CRASH7     	("crash pass inv pos") 		// краш пасажиром (флудит в синхру невалидной позиции)
#define AC_INVIZ0     	("invis obj surf") 			// инвиз сурфом на объекте (кидает сурф на 1 объект)
#define AC_DERPCAM      ("derpcam") 				// проклятый DerpCam от FYP, вызывает болезнь паркинсона у камеры других игроков
#define AC_CRASH8       ("crash inv surf") 			// краш невалидным сурфом (NaN) игроков в спеке
#define AC_FLY5         ("fly fcl")                 // fly почти все палит
#define AC_CROSFLOOD    ("wide flood") 				// обширный флуд по автовызываемым пабликам
#define AC_PUBFLOOD     ("pub flood #") 			// флуд в автовызываемые паблики

#if !defined gpci
	native gpci(playerid, serial[], maxlen);
#endif

#if defined foreach
	#define AC_FORPLAYER(%0)      foreach(Player, %0)
#else
	#define AC_FORPLAYER(%0)      for(new %0 = GetPlayerPoolSize(); %0 >= 0; %0--) if(IsPlayerConnected(%0))
#endif

new ac_text3dValid[MAX_3DTEXT_GLOBAL char];

static warningPanelTime[AC_WARNLINE char];
static warningPanelText[AC_WARNLINE][100];
static Text:warningPanelTD[AC_WARNLINE];

new Float:ac_playerPosX[MAX_PLAYERS];
new Float:ac_playerPosY[MAX_PLAYERS];
new Float:ac_playerPosZ[MAX_PLAYERS];
new Float:ac_playerArmour[MAX_PLAYERS];
new Float:ac_playerHealth[MAX_PLAYERS];
new Float:vehicleHealth[MAX_VEHICLES];
static Float:playerPassengerVelX[MAX_VEHICLES];
static Float:playerPassengerVelY[MAX_VEHICLES];
static Float:playerPassengerVelZ[MAX_VEHICLES];

new ac_playerIP[MAX_PLAYERS][16];
new ac_playerName[MAX_PLAYERS][25];
new ac_playerAmmo[MAX_PLAYERS][13];
new ac_playerWeaponID[MAX_PLAYERS][13];
static vehicleOccupied[MAX_VEHICLES][9];
static playerWarningPublic[MAX_PLAYERS][28];
static playerLastPublicTick[MAX_PLAYERS][28];
static playerNullWarningTimer[MAX_PLAYERS][AC_NULLWARN];

new ac_playerPaused[MAX_PLAYERS];
static playerLagFly[MAX_PLAYERS];
static playerLagSpeed[MAX_PLAYERS];
new ac_playerShotHits[MAX_PLAYERS];
static playerLastShot[MAX_PLAYERS];
static playerLastHitID[MAX_PLAYERS];
static playerKickTimer[MAX_PLAYERS];
static playerLastSpeed[MAX_PLAYERS];
static playerSpawnTimer[MAX_PLAYERS];
static playerLastHitTick[MAX_PLAYERS];
static playerVehicleEnter[MAX_PLAYERS];
static playerVehicleEnterTime[MAX_PLAYERS];

static playerSpawn[MAX_PLAYERS char];
static playerUseSlot[MAX_PLAYERS char];
static playerFakeKill[MAX_PLAYERS char];
static playerInModShop[MAX_PLAYERS char];
static playerRemoveVehicle[MAX_PLAYERS char];

static playerWarningAim0[MAX_PLAYERS char];
static playerWarningAim3[MAX_PLAYERS char];
static playerWarningFly0[MAX_PLAYERS char];
static playerWarningFly1[MAX_PLAYERS char];
static playerWarningFly2[MAX_PLAYERS char];
static playerWarningRcon[MAX_PLAYERS char];
static playerWarningPing[MAX_PLAYERS char];
static playerWarningSurf[MAX_PLAYERS char];
static playerWarningInviz[MAX_PLAYERS char];
static playerWarningRapid[MAX_PLAYERS char];
static playerWarningSpeed[MAX_PLAYERS char];
static playerWarningReapir[MAX_PLAYERS char];
static playerWarningArmour[MAX_PLAYERS char];
static playerWarningHealth[MAX_PLAYERS char];
static playerWarningProAim[MAX_PLAYERS char];
static playerWarningCarShot[MAX_PLAYERS char];

static playerCheckFly[MAX_PLAYERS char];
static playerCheckRepair[MAX_PLAYERS char];
static playerCheckWeapon[MAX_PLAYERS char];
static playerCheckArmour[MAX_PLAYERS char];
static playerCheckHealth[MAX_PLAYERS char];

static Float:SprayPos[10][3] =
{
	{2064.2842, -1831.4736, 13.5469},
	{-2425.7822, 1022.1392, 50.3977},
	{-1420.5195, 2584.2305, 55.8433},
	{487.6401, -1739.9479, 11.1385},
	{1024.8651, -1024.087, 32.1016},
	{-1904.7019, 284.5968, 41.0469},
	{1975.2384, 2162.5088, 11.0703},
	{2393.4456, 1491.5537, 10.5616},
	{720.0854, -457.8807, 16.3359},
	{-99.9417, 1117.9048, 19.7417}
};

static Float:WaterPos[19][4] =
{
	{884.5607,-1720.8746,12.9217,25.0},
	{2313.5029,-1416.8055,21.6150,20.0},
	{1970.9321,-1200.1354,17.4500,45.0},
	{1094.7080,-672.1907,111.4500,15.0},
	{512.8158,-1105.0758,78.8238,15.0},
	{226.4365,-1184.9742,73.4500,15.0},
	{195.2572,-1232.7897,76.5034,20.0},
	{1279.6432,-806.7355,86.1230,15.0},
	{-645.3854,-1927.5696,17.1965,200.0},
	{-2710.0344,-468.7650,2.2426,55.0},
	{-2449.1758,-270.7404,35.6148,75.0},
	{-2023.0673,-859.7955,32.1719,100.0},
	{1769.9637,2817.6643,8.3359,40.0},
	{2531.6294,1569.6953,8.4171,25.0},
	{2178.7285,1116.1986,12.6484,70.0},
	{2141.7139,1286.6537,7.9766,55.0},
	{1936.2334,1610.5770,22.7679,150.0},
	{2116.8345,1683.3533,13.0060,30.0},
	{2090.9016,1914.8190,9.0792,55.0}
};

static Float:WeaponDamage[13] = {8.25, 13.20, 46.20, 49.50, 49.50, 39.60, 6.60, 8.25, 9.90, 9.90, 6.60, 24.75, 41.25};
static Float:MaxDistShot[13] = {45.0, 45.0, 45.0, 50.0, 45.0, 50.0, 45.0, 55.0, 100.0, 120.0, 45.0, 110.0, 320.0};
static WeaponReload[13] = {150, 300, 150, 150, 100, 250, 30, 50, 90, 90, 30, 1000, 1000}; // 24: 650 | 25: 1000

new ac_WeaponSlots[47] =
{
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, -1, -1, -1, 2,
	2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

static MaxPassengers[212] =
{
    3, 1, 1, 1, 3, 3, 0, 1, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1, 3, 1, 3, 3, 1, 1, 1, 0, 3, 3, 3, 1, 0, 8, 0, 1, 1, 15, 1, 8, 3, 1, 3, 0, 1, 1,
	1, 3, 0, 1, 0, 1, 15, 1, 0, 0, 0, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 1, 0, 0, 1, 1, 0, 1, 1, 3, 1, 0, 3, 1, 0, 0, 0, 3,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 0, 0, 1, 0, 0, 1, 1, 3, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0,
	0, 1, 1, 1, 1, 2, 2, 0, 3, 1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 0, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 0, 1, 3, 3, 0, 15, 1, 0, 0, 1, 0, 1,
	1, 1, 1, 3, 3, 1, 3, 0, 15, 3, 1, 1, 1, 1, 15, 15, 1, 1, 1, 0, 3, 3, 3, 1, 1, 1, 1, 1, 3, 1, 15, 15, 15, 3, 15, 15
};

static PublicMaxTick[28] =
{
	200,	// 0 OnDialogResponse
	800,	// 1 OnEnterExitModShop
	200,	// 2 OnPlayerClickMap
	400,	// 3 OnPlayerClickPlayer
	50,		// 4 OnPlayerClickTextDraw
	200,	// 5 OnPlayerCommandReceived
	100,	// 6 OnPlayerEnterVehicle
	100,	// 7 OnPlayerExitVehicle
	100,	// 8 OnPlayerPickUpPickup
	100,	// 9 OnPlayerRequestClass
	50,		// 10 OnPlayerSelectedMenuRow
	600,	// 11 OnPlayerStateChange
	500,	// 12 OnVehicleMod
	500,	// 13 OnVehiclePaintjob
	500,	// 14 OnVehicleRespray
	300,	// 15 OnVehicleDeath
	200,	// 16 OnPlayerText
	500,	// 17 OnPlayerEnterCheckpoint
	500,	// 18 OnPlayerLeaveCheckpoint
	100,	// 19 OnPlayerRequestSpawn
	200,	// 20 OnPlayerExitedMenu
	500,	// 21 OnPlayerEnterRaceCheckpoint
	500,	// 22 OnPlayerLeaveRaceCheckpoint
	50,		// 23 OnPlayerClickPlayerTextDraw
	50,		// 24 OnVehicleDamageStatusUpdate
	100,	// 25 OnVehicleSirenStateChange
	100,	// 26 OnPlayerSelectObject
	100		// 27 Cross-public
};

static VehicleAir[212] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

static VehicleWater[212] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

static VehicleMods[212][] =
{
	{0b00000011001111000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000110100010011111111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001110110010011110000101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111000100011100000011, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011101110100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100011100000011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001100010000011101000100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001010000000011100111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111010100011100000001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001110100010011110000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001010000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010011110100010011111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100000100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111100000011111000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011011100000011011100110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011000111010010011101110101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111100100011110001000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000010000011101110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100110100000111111001110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011001110000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111111000011110010101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111110000011110001100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010100101100010011111101010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001101101100011110000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111100001111111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b11111100000000000000010000110111, 0b00000000000000000000000000000000, 0b00000010000111000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000011111111100110000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000001101110000111, 0b00000000000000000000000000000001, 0b00000001111000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011100111100000011111010010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111001100011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011100011100000011111010110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010001111010000011100001001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111100001111110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010100111000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010101111010000011101101100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b11111111111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000111111000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111111111110, 0b00000000000000000000000000000111, 0b11000000000000000000000000000000, 0b00000000000000000010000000000111},
	{0b11111110000000000000011100000000, 0b00000000000000000000000000000011, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000011110000000000, 0b00000000000000000000011000000000},
	{0b11001110000000000000011100000000, 0b11111111100000000000000000000000, 0b00000000111111111111111000000001, 0b00000000000000000000000000000111, 0b00111100000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000001111111100, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000001111000000000000000000, 0b00000000000000000001100000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000011111111110000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000011110000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000001000111, 0b00000000000000000000000000111110, 0b00111100000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000001110000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000001111, 0b00000000000000000000000000000000, 0b00000000000000111100000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000001111000000, 0b11000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010100101100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011000101110010011111110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010010101100010011111110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000011100111100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
	{0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000}
};

stock ac_strcmp(acstr1[], acstr2[], bool:ignor = false, length = cellmax)
{
	new ret = strcmp(acstr1, acstr2, ignor, length);
    if(!ret && (!strlen(acstr1) || !strlen(acstr2))) return 255;
	return ret;
}
#if defined _ALS_strcmp
	#undef strcmp
#else
	#define	_ALS_strcmp
#endif
#define strcmp ac_strcmp

stock ac_IsPlayerConnected(playerid)
{
    if(!(0 <= playerid < MAX_PLAYERS)) return 0;
	return IsPlayerConnected(playerid);
}
#if defined _ALS_IsPlayerConnected
	#undef IsPlayerConnected
#else
	#define	_ALS_IsPlayerConnected
#endif
#define IsPlayerConnected ac_IsPlayerConnected

#define IsValid3DTextLabelAC(%0)		(_:%0 >= 0 && _:%0 < MAX_3DTEXT_GLOBAL && ac_text3dValid{_:%0})
#define IsPlayerPausedAC(%0) 			(ac_playerPaused[%0] > 3)
#define GetPlayerPausedTimeAC(%0)       (ac_playerPaused[%0])
#define GetPlayerShotAC(%0)             (ac_playerShotHits[%0])
#define GetWeaponSlotAC(%0)          	(ac_WeaponSlots[%0])
#define GetPlayerIpAC(%0)           	(ac_playerIP[%0])
#define GetPlayerNameAC(%0)				(ac_playerName[%0])
#define GetPlayerArmourAC(%0) 			(ac_playerArmour[%0])
#define GetPlayerHealthAC(%0) 			(ac_playerHealth[%0])
#define GetPlayerPosXAC(%0)				(ac_playerPosX[%0])
#define GetPlayerPosYAC(%0)				(ac_playerPosY[%0])
#define GetPlayerPosZAC(%0)				(ac_playerPosZ[%0])

stock GetPlayerWeaponDataAC(playerid, slot, &weap, &ammo)
{
    ammo = ac_playerAmmo[playerid][slot];
    weap = ac_playerWeaponID[playerid][slot];
}

stock IsAirTransportAC(vehid)
{
	new model = GetVehicleModel(vehid);
	if(!model) return 0;
	return VehicleAir[model - 400];
}
stock IsWaterTransportAC(vehid)
{
    new model = GetVehicleModel(vehid);
	if(!model) return 0;
	return VehicleWater[model - 400];
}

stock ShowWarningPanelAC(playerid) { for(new id = (AC_WARNLINE - 1); id >= 0; id--) TextDrawShowForPlayer(playerid, warningPanelTD[id]); }
stock HideWarningPanelAC(playerid) { for(new id = (AC_WARNLINE - 1); id >= 0; id--) TextDrawHideForPlayer(playerid, warningPanelTD[id]); }

stock KickAC(playerid)
{
	if(!playerKickTimer[playerid] && IsPlayerConnected(playerid)) playerKickTimer[playerid] = SetTimerEx("ac_KickTimer", (GetPlayerPing(playerid) > AC_MAX_PING) ? (AC_MAX_PING + 50) : (GetPlayerPing(playerid) + 50), 0, "i", playerid);
	return 1;
}

stock GetVehicleDriverIDAC(vehid)
{
	if(IsPlayerInVehicle(vehicleOccupied[vehid][0], vehid) && GetPlayerState(vehicleOccupied[vehid][0]) == PLAYER_STATE_DRIVER) return vehicleOccupied[vehid][0];
	return 0xFFFF;
}

stock IsVehicleOccupiedAC(vehid)
{
	for(new id = 8; id >= 0; id--) if(IsPlayerInVehicle(vehicleOccupied[vehid][id], vehid)) return 1;
	return 0;
}

stock GetTickDiffAC(newtick, oldtick)
{
	if(oldtick > newtick || (oldtick >= 0 && newtick < 0)) return ((cellmax - oldtick + 1) - (cellmin - newtick));
	return (newtick - oldtick);
}

stock GetPlayerSpeedAC(playerid)
{
    new Float:vel_x, Float:vel_y, Float:vel_z, vehid = GetPlayerVehicleID(playerid);
    if(!vehid) GetPlayerVelocity(playerid, vel_x, vel_y, vel_z);
	else GetVehicleVelocity(vehid, vel_x, vel_y, vel_z);
	return floatround(VectorSize(vel_x, vel_y, 0.0) * 136.666667);
}

stock IsPlayerInPayNSprayAC(playerid)
{
    for(new id = (sizeof(SprayPos) - 1); id >= 0; id--) if(IsPlayerInRangeOfPoint(playerid, 7.5, SprayPos[id][0], SprayPos[id][1], SprayPos[id][2])) return 1;
	return 0;
}

stock IsPlayerInWaterAC(playerid)
{
	new Float:pos_z;
    GetPlayerPos(playerid, pos_z, pos_z, pos_z);
	if(pos_z < 0.0) return 1;
	for(new id = (sizeof(WaterPos) - 1); id >= 0; id--) if(GetPlayerDistanceFromPoint(playerid, WaterPos[id][0], WaterPos[id][1], WaterPos[id][2]) <= WaterPos[id][3]) return 1;
	return 0;
}

stock IsVehicleInWaterAC(vehid)
{
	new Float:pos_z;
    GetVehiclePos(vehid, pos_z, pos_z, pos_z);
	if(pos_z < 0.0) return 1;
	for(new id = (sizeof(WaterPos) - 1); id >= 0; id--) if(GetVehicleDistanceFromPoint(vehid, WaterPos[id][0], WaterPos[id][1], WaterPos[id][2]) <= WaterPos[id][3]) return 1;
	return 0;
}

stock IsComponentidCompatibleAC(modelid, componentid)
{
	if(1000 <= componentid <= 1191)
	{
		componentid -= 1000;
		if(VehicleMods[modelid - 400][componentid >>> 5] & (1 << (componentid & 0b00011111))) return 1;
	}
	else if((componentid == 1192 || componentid == 1193) && modelid == 576) return 1;
	return 0;
}

stock IsPlayerFacingCoordsAC(playerid, Float:dest_x, Float:dest_y, Float:offset = 5.0)
{
    new Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_a, Float:tmp1, Float:tmp2, Float:tmp3 = 5.0;
    GetPlayerPos(playerid, pos_x, pos_y, pos_z);
    GetPlayerFacingAngle(playerid, pos_a);
    tmp2 = (180.0 - atan2((pos_x - dest_x), (pos_y - dest_y)));
    tmp2 += tmp3;
    tmp3 *= -1;
    tmp1 = (tmp2 + tmp3);
    if((tmp1 + offset) > 360.0) tmp1 = (360.0 - offset);
    if((tmp1 - offset) < 0.0) tmp1 = (0.0 + offset);
    if((tmp1 - offset) < pos_a < (tmp1 + offset)) return 1;
    return 0;
}

static stock SleepTime(playerid)
{
	new count = (3 + floatround((GetPlayerPing(playerid) > AC_MAX_PING) ? (AC_MAX_PING / 100) : (GetPlayerPing(playerid) / 100)));
	return (count < 3) ? (3) : (count > 10) ? (10) : (count);
}

static stock PublicFlood(playerid, id)
{
    if(GetTickDiffAC(GetTickCount(), playerLastPublicTick[playerid][id]) < PublicMaxTick[id]) { if(++playerWarningPublic[playerid][id] > 10)
	{
	    new acstr[100];
   		format(acstr, sizeof(acstr), "%s%i", AC_PUBFLOOD, id);
		CheatDetected(playerid, acstr);
	}}
	else playerWarningPublic[playerid][id] = 0;
	if(GetTickDiffAC(GetTickCount(), playerLastPublicTick[playerid][27]) < PublicMaxTick[27]) { if(++playerWarningPublic[playerid][27] > 10) CheatDetected(playerid, AC_CROSFLOOD); }
	else playerWarningPublic[playerid][27] = 0;
	playerLastPublicTick[playerid][id] =
	playerLastPublicTick[playerid][27] = GetTickCount();
}

static stock CheatDetected(playerid, code[]) { if(!playerKickTimer[playerid] && IsPlayerConnected(playerid))
{
	new ret = 1;
	#if defined OnPlayerCheatAC
		ret = OnPlayerCheatAC(playerid, code);
	#endif
	if(ret)
	{
	    KickAC(playerid);
		AddToWarningPanel(playerid, code, 1);
	}
}}

static stock AddToWarningPanel(playerid, reason[], type = 0) { if(IsPlayerConnected(playerid))
{
    #if defined OnPlayerWarningPanelAC
		if(!OnPlayerWarningPanelAC(playerid, reason)) return;
	#endif
	new acstr[100];
    if(!type) format(acstr, sizeof(acstr), "(warning): %s(%i)(%s) reason: %s", ac_playerName[playerid], playerid, ac_playerIP[playerid], reason);
    else format(acstr, sizeof(acstr), "(kick): %s(%i)(%s) reason: %s", ac_playerName[playerid], playerid, ac_playerIP[playerid], reason);
	SendAdminMessage(0xafafafff, acstr);
	for(new id = (AC_WARNLINE - 1); id >= 0; id--) if(!strcmp(warningPanelText[id], acstr))
	{
	    warningPanelTime{id} = 30;
		return;
	}
	for(new id = (AC_WARNLINE - 1); id > 0; id--)
	{
	    warningPanelTime{id} = warningPanelTime{id - 1};
		warningPanelText[id] = warningPanelText[id - 1];
	}
	warningPanelTime{0} = 30;
	warningPanelText[0] = acstr;
 	for(new id = (AC_WARNLINE - 1); id >= 0; id--) TextDrawSetString(warningPanelTD[id], warningPanelText[id]);
}}

forward ac_MainUpdate();
public ac_MainUpdate()
{
	for(new id = (AC_WARNLINE - 1); id >= 0; id--) if(warningPanelTime{id}) { if(--warningPanelTime{id} <= 0)
	{
	    warningPanelText[id] = "_";
		TextDrawSetString(warningPanelTD[id], "_");
	}}
	AC_FORPLAYER(playerid)
	{
	    new Float:pos_x, Float:pos_y, Float:pos_z;
	    GetPlayerPos(playerid, pos_x, pos_y, pos_z);
		if(++ac_playerPaused[playerid] <= 3)
		{
		    for(new id = (AC_NULLWARN - 1); id >= 0; id--) if(playerNullWarningTimer[playerid][id]) { if(--playerNullWarningTimer[playerid][id] <= 0) switch(id)
		    {
		        case 0: if(--playerWarningSpeed{playerid} > 0) playerNullWarningTimer[playerid][id] = 10;
		        case 1: if(--playerWarningCarShot{playerid} > 0) playerNullWarningTimer[playerid][id] = 10;
		    }}
		    if(NetStats_MessagesRecvPerSecond(playerid) > 800) CheatDetected(playerid, AC_RECVPER);
		    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) CheatDetected(playerid, AC_JETPACK);
		    
		    if(GetPlayerPing(playerid) > AC_MAX_PING) { if(++playerWarningPing{playerid} > 10) CheatDetected(playerid, AC_PING); }
			else playerWarningPing{playerid} = 0;
			
		  	if(playerCheckWeapon{playerid}) playerCheckWeapon{playerid}--;
		    else { for(new id = 12; id >= 0; id--)
			{
			    new weap, ammo;
		 		GetPlayerWeaponData(playerid, id, weap, ammo);
		 		if(weap && weap != 1 && weap != 46)
		 		{
			 		if(ammo < ac_playerAmmo[playerid][id]) ac_playerAmmo[playerid][id] = ammo;
			        if(weap != ac_playerWeaponID[playerid][id]) CheatDetected(playerid, AC_WEAPON);
	     		}
			}}
		  	if(playerCheckArmour{playerid}) playerCheckArmour{playerid}--;
			else
			{
				new Float:arm;
				GetPlayerArmour(playerid, arm);
				if(ac_playerArmour[playerid] < arm)
				{
				    SetPlayerArmour(playerid, ac_playerArmour[playerid]);
				    if(++playerWarningArmour{playerid} > 10) CheatDetected(playerid, AC_ARMOUR);
				}
				else if(ac_playerArmour[playerid] > arm)
				{
					ac_playerArmour[playerid] = arm;
					playerWarningArmour{playerid} = 0;
				}
				else playerWarningArmour{playerid} = 0;
			}
			if(playerCheckHealth{playerid}) playerCheckHealth{playerid}--;
			else
			{
				new Float:heal;
				GetPlayerHealth(playerid, heal);
				if(ac_playerHealth[playerid] < heal)
				{
				    SetPlayerHealth(playerid, ac_playerHealth[playerid]);
				    if(++playerWarningHealth{playerid} > 10) CheatDetected(playerid, AC_HEALTH);
				}
				else if(ac_playerHealth[playerid] > heal)
				{
					ac_playerHealth[playerid] = heal;
					playerWarningHealth{playerid} = 0;
				}
				else playerWarningHealth{playerid} = 0;
			}
			new vehid = GetPlayerVehicleID(playerid);
			if(vehid)
			{
				if(vehid != playerVehicleEnter[playerid]) CheatDetected(playerid, AC_CARHACK0);
				if(playerRemoveVehicle{playerid}) { if(--playerRemoveVehicle{playerid} <= 0) CheatDetected(playerid, AC_VEHREMOVE); }
			}
			else
			{
			    new animid = GetPlayerAnimationIndex(playerid);
			    switch(animid)
                {
					case 1058: CheatDetected(playerid, AC_FLY4);
			    	case 157, 159, 161: CheatDetected(playerid, AC_FLY1);
 				}
			    if(1538 <= animid <= 1544 && !IsPlayerInWaterAC(playerid)) { if(++playerWarningFly1{playerid} > 2) CheatDetected(playerid, AC_FLY2); }
			    else playerWarningFly1{playerid} = 0;
			    
			    if((animid == 958 || animid == 959) && GetPlayerWeapon(playerid) != 46) { if(++playerWarningFly2{playerid} > 2) CheatDetected(playerid, AC_FLY3); }
                else playerWarningFly2{playerid} = 0;
			}
			new gstate = GetPlayerState(playerid);
			if(gstate == PLAYER_STATE_DRIVER)
			{
				if(playerCheckRepair{playerid}) playerCheckRepair{playerid}--;
				else
				{
			    	new Float:heal;
			    	GetVehicleHealth(vehid, heal);
					if(!playerInModShop{playerid} && heal > vehicleHealth[vehid] && !IsPlayerInPayNSprayAC(playerid))
					{
					    SetVehicleHealth(vehid, vehicleHealth[vehid]);
						if(++playerWarningReapir{playerid} > 10) CheatDetected(playerid, AC_REPAIR);
					}
					else
					{
		                vehicleHealth[vehid] = heal;
		                playerWarningReapir{playerid} = 0;
					}
				}
			}
			new objid = GetPlayerSurfingObjectID(playerid);
			if(playerCheckFly{playerid}) playerCheckFly{playerid}--;
		 	else
		 	{
		 		if((gstate == PLAYER_STATE_DRIVER || gstate == PLAYER_STATE_ONFOOT) && GetTickDiffAC(GetTickCount(), playerLagFly[playerid]) < 1500 && ac_playerPosZ[playerid] > -35.0)
			 	{
					new Float:dist = VectorSize(floatabs(ac_playerPosX[playerid] - pos_x), floatabs(ac_playerPosY[playerid] - pos_y), 0.0);
					if(gstate == PLAYER_STATE_DRIVER && dist > 200.0) CheatDetected(playerid, AC_TP0);
					if(gstate == PLAYER_STATE_ONFOOT && dist > 60.0 && objid == 0xFFFF && GetPlayerSurfingVehicleID(playerid) == 0xFFFF) CheatDetected(playerid, AC_TP1);
					if(dist > 5.0 && GetPlayerSpeedAC(playerid) < 2) { if(++playerWarningFly0{playerid} > 2) CheatDetected(playerid, AC_FLY0); }
					else playerWarningFly0{playerid} = 0;
				}
			}
			if(objid && objid != 0xFFFF)
			{
				new Float:pos_ox, Float:pos_oy, Float:pos_oz;
				GetObjectPos(objid, pos_ox, pos_oy, pos_oz);
				if(!IsPlayerInRangeOfPoint(playerid, 50.0, pos_ox, pos_oy, pos_oz)) { if(++playerWarningInviz{playerid} > 10) CheatDetected(playerid, AC_INVIZ0); }
				else playerWarningInviz{playerid} = 0;
			}
			else playerWarningInviz{playerid} = 0;
		}
		playerLagFly[playerid] = GetTickCount();
	 	ac_playerPosX[playerid] = pos_x;
	 	ac_playerPosY[playerid] = pos_y;
	 	ac_playerPosZ[playerid] = pos_z;
	}
}

forward ac_FastUpdate();
public ac_FastUpdate() AC_FORPLAYER(playerid)
{
    if(ac_playerPaused[playerid] <= 3)
    {
		new speed = GetPlayerSpeedAC(playerid), gstate = GetPlayerState(playerid);
  		if(speed > 220.0) CheatDetected(playerid, AC_SPEED);
  		if(gstate == PLAYER_STATE_DRIVER)
		{
	 		if(GetTickDiffAC(GetTickCount(), playerLagSpeed[playerid]) < 250 && !IsAirTransportAC(GetPlayerVehicleID(playerid)))
	 		{
			 	if((speed - playerLastSpeed[playerid]) > 40)
			 	{
			 	    if(++playerWarningSpeed{playerid} > 2) CheatDetected(playerid, AC_DIFFSPEED);
			 	    playerNullWarningTimer[playerid][0] = 10;
			 	}
			 	else { if((speed - playerLastSpeed[playerid]) > 20) AddToWarningPanel(playerid, "speed"); }
		 	}
	 		playerLastSpeed[playerid] = speed;
	 	}
		else if(gstate == PLAYER_STATE_ONFOOT)
		{
	    	new Float:vel_x, Float:vel_y, Float:vel_z;
	    	GetPlayerVelocity(playerid, vel_x, vel_y, vel_z);
	        if((floatabs(vel_x) > 0.3 || floatabs(vel_y) > 0.3) && vel_z > -0.2 && GetPlayerWeapon(playerid) != 46 && GetPlayerSurfingVehicleID(playerid) == 0xFFFF && GetPlayerSurfingObjectID(playerid) == 0xFFFF) SetTimerEx("ac_CheckSurfing", 2100, 0, "if", playerid, ac_playerHealth[playerid], GetPlayerVehicleID(playerid));
			else playerWarningSurf{playerid} = 0;
		}
	}
	playerLagSpeed[playerid] = GetTickCount();
}

forward ac_CheckProxy(playerid, response_code, data[]);
public ac_CheckProxy(playerid, response_code, data[]) { if(response_code == 200 && data[0] == 'Y') AddToWarningPanel(playerid, "proxy"); }

forward ac_CheckSurfing(playerid, Float:heal, vehid);
public ac_CheckSurfing(playerid, Float:heal, vehid)
{
	if(heal <= ac_playerHealth[playerid] && vehid == GetPlayerVehicleID(playerid)) { if(++playerWarningSurf{playerid} > 1) AddToWarningPanel(playerid, "surf"); }
	else playerWarningSurf{playerid} = 0;
}

forward ac_KickTimer(playerid);
public ac_KickTimer(playerid)
{
    playerKickTimer[playerid] = 0;
    if(IsPlayerConnected(playerid)) Kick(playerid);
}

forward ac_SpawnTimer(playerid);
public ac_SpawnTimer(playerid)
{
	playerSpawn{playerid} = 0;
	playerSpawnTimer[playerid] = 0;
}

IRPC:136(playerid, BitStream:bs) // VEHICLE_DEATH
{
    new vehid, Float:heal;
    BS_ReadUint16(bs, vehid);
    GetVehicleHealth(vehid, heal);
    if(heal > 300.0 && !IsVehicleInWaterAC(vehid)) return 0;
    return 1;
}

IPacket:211(playerid, BitStream:bs) // PASSENGER_SYNC
{
    new data[PR_PassengerSync];
    BS_IgnoreBits(bs, 8);
    BS_ReadPassengerSync(bs, data);
	if(!data[PR_seatId]) { CheatDetected(playerid, AC_CRASH3); return 0; }
    return 1;
}

IPacket:200(playerid, BitStream:bs) // VEHICLE_SYNC
{
    new data[PR_InCarSync];
    BS_IgnoreBits(bs, 8);
    BS_ReadInCarSync(bs, data);
    if(floatabs(data[PR_velocity][2]) > 10.0)
    {
        data[PR_velocity][2] = 0.0;
        BS_SetWriteOffset(bs, 8);
        BS_WriteInCarSync(bs, data);
    }
    return 1;
}

IPacket:207(playerid, BitStream:bs) // PLAYER_SYNC
{
    new data[PR_OnFootSync];
    BS_IgnoreBits(bs, 8);
    BS_ReadOnFootSync(bs, data);
    switch(data[PR_weaponId]) { case 44, 45:
	{
		data[PR_weaponId] = 0;
		BS_SetWriteOffset(bs, 8);
		BS_WriteOnFootSync(bs, data);
	}}
	/*switch(data[PR_specialAction])
	{
		case 3, 11, 13: {}
		default: if(data[PR_animationId] != 1130 && data[PR_animationId] != 1132 && data[PR_weaponId] != 46 && (floatabs(data[PR_quaternion][1]) > 0.000000 || floatabs(data[PR_quaternion][2]) > 0.000000)) CheatDetected(playerid, AC_FLY5);
	}*/
    if(data[PR_surfingOffsets][0] != data[PR_surfingOffsets][0] || data[PR_surfingOffsets][1] != data[PR_surfingOffsets][1] || data[PR_surfingOffsets][2] != data[PR_surfingOffsets][2]) { CheatDetected(playerid, AC_CRASH8); return 0; }
	return 1;
}

IPacket:203(playerid, BitStream:bs) // AIM_SYNC
{
    new data[PR_AimSync];
    BS_IgnoreBits(bs, 8);
    BS_ReadAimSync(bs, data);
    if(data[PR_aimZ] != data[PR_aimZ])
	{
	    data[PR_aimZ] = 0.0;
	    BS_SetWriteOffset(bs, 8);
        BS_WriteAimSync(bs, data);
	}
	switch(data[PR_camMode]) { case 34, 45, 49: { CheatDetected(playerid, AC_DERPCAM); return 0; }}
    return 1;
}

stock ac_GetPlayerFacingAngle(playerid, &Float:ang)
{
    GetPlayerFacingAngle(playerid, ang);
    if(ang != ang) { ang = 0.0; return 0; }
    return 1;
}
#if defined _ALS_GetPlayerFacingAngle
    #undef GetPlayerFacingAngle
#else
    #define _ALS_GetPlayerFacingAngle
#endif
#define GetPlayerFacingAngle ac_GetPlayerFacingAngle

stock ac_SetPlayerSkin(playerid, skinid)
{
    if(GetTickDiffAC(GetTickCount(), playerVehicleEnterTime[playerid]) > (SleepTime(playerid) * 1000)) return SetPlayerSkin(playerid, skinid);
    return 0;
}
#if defined _ALS_SetPlayerSkin
    #undef SetPlayerSkin
#else
    #define _ALS_SetPlayerSkin
#endif
#define SetPlayerSkin ac_SetPlayerSkin

stock ac_RepairVehicle(vehid)
{
    new ret = GetVehicleDriverIDAC(vehid);
    if(ret != 0xFFFF) playerCheckRepair{ret} = SleepTime(ret);
    vehicleHealth[vehid] = 1000.0;
    return RepairVehicle(vehid);
}
#if defined _ALS_RepairVehicle
	#undef RepairVehicle
#else
	#define _ALS_RepairVehicle
#endif
#define RepairVehicle ac_RepairVehicle

stock ac_SetVehicleHealth(vehid, Float:health)
{
    new ret = GetVehicleDriverIDAC(vehid);
    if(ret != 0xFFFF) playerCheckRepair{ret} = SleepTime(ret);
	vehicleHealth[vehid] = health;
	return SetVehicleHealth(vehid, health);
}
#if defined _ALS_SetVehicleHealth
	#undef SetVehicleHealth
#else
	#define _ALS_SetVehicleHealth
#endif
#define SetVehicleHealth ac_SetVehicleHealth

stock ac_SetPlayerArmour(playerid, Float:armour)
{
 	playerCheckArmour{playerid} = SleepTime(playerid);
 	ac_playerArmour[playerid] = (armour < 0.0) ? (0.0) : (armour > 100.0) ? (100.0) : (armour);
   	return SetPlayerArmour(playerid, ac_playerArmour[playerid]);
}
#if defined _ALS_SetPlayerArmour
	#undef SetPlayerArmour
#else
	#define _ALS_SetPlayerArmour
#endif
#define SetPlayerArmour ac_SetPlayerArmour

stock ac_SetPlayerHealth(playerid, Float:health)
{
	playerCheckHealth{playerid} = SleepTime(playerid);
	ac_playerHealth[playerid] = (health < 0.0) ? (0.0) : (health);
	return SetPlayerHealth(playerid, ac_playerHealth[playerid]);
}
#if defined _ALS_SetPlayerHealth
	#undef SetPlayerHealth
#else
	#define _ALS_SetPlayerHealth
#endif
#define SetPlayerHealth ac_SetPlayerHealth

stock ac_SetPlayerPos(playerid, Float:pos_x, Float:pos_y, Float:pos_z)
{
    playerCheckFly{playerid} = SleepTime(playerid);
 	return SetPlayerPos(playerid, pos_x, pos_y, pos_z);
}
#if defined _ALS_SetPlayerPos
	#undef SetPlayerPos
#else
	#define	_ALS_SetPlayerPos
#endif
#define SetPlayerPos ac_SetPlayerPos

stock ac_LinkVehicleToInterior(vehid, interiorid)
{
    AC_FORPLAYER(playerid) if(IsPlayerInVehicle(playerid, vehid)) SetPlayerInterior(playerid, interiorid);
    return LinkVehicleToInterior(vehid, interiorid);
}
#if defined _ALS_LinkVehicleToInterior
	#undef LinkVehicleToInterior
#else
	#define	_ALS_LinkVehicleToInterior
#endif
#define LinkVehicleToInterior ac_LinkVehicleToInterior

stock ac_SetVehicleVirtualWorld(vehid, worldid)
{
    AC_FORPLAYER(playerid) if(IsPlayerInVehicle(playerid, vehid)) SetPlayerVirtualWorld(playerid, worldid);
    return SetVehicleVirtualWorld(vehid, worldid);
}
#if defined _ALS_SetVehicleVirtualWorld
	#undef SetVehicleVirtualWorld
#else
	#define	_ALS_SetVehicleVirtualWorld
#endif
#define SetVehicleVirtualWorld ac_SetVehicleVirtualWorld

stock ac_SetVehiclePos(vehid, Float:pos_x, Float:pos_y, Float:pos_z)
{
	AC_FORPLAYER(playerid) if(IsPlayerInVehicle(playerid, vehid)) playerCheckFly{playerid} = SleepTime(playerid);
 	return SetVehiclePos(vehid, pos_x, pos_y, pos_z);
}
#if defined _ALS_SetVehiclePos
	#undef SetVehiclePos
#else
	#define	_ALS_SetVehiclePos
#endif
#define SetVehiclePos ac_SetVehiclePos

stock ac_RemovePlayerFromVehicle(playerid)
{
	if(!GetPlayerVehicleID(playerid)) return 0;
	switch(GetVehicleModel(GetPlayerVehicleID(playerid))) { case 0, 441, 464, 465, 501, 564, 594: return 0; }
	playerRemoveVehicle{playerid} = (2 + SleepTime(playerid));
	new Float:pos_x, Float:pos_y, Float:pos_z;
	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	return SetPlayerPos(playerid, pos_x, pos_y, (pos_z + 2.0));
}
#if defined _ALS_RemovePlayerFromVehicle
	#undef RemovePlayerFromVehicle
#else
	#define	_ALS_RemovePlayerFromVehicle
#endif
#define RemovePlayerFromVehicle ac_RemovePlayerFromVehicle

stock ac_TogglePlayerSpectating(playerid, type)
{
	if(!type)
	{
	    if(playerSpawnTimer[playerid])
		{
			KillTimer(playerSpawnTimer[playerid]);
			playerSpawnTimer[playerid] = 0;
		}
		playerSpawn{playerid} = 1;
	}
    return TogglePlayerSpectating(playerid, type);
}
#if defined _ALS_TogglePlayerSpectating
	#undef TogglePlayerSpectating
#else
	#define	_ALS_TogglePlayerSpectating
#endif
#define TogglePlayerSpectating ac_TogglePlayerSpectating

stock ac_SpawnPlayer(playerid)
{
	if(GetPlayerVehicleID(playerid))
	{
		new Float:pos_x, Float:pos_y, Float:pos_z;
		GetPlayerPos(playerid, pos_x, pos_y, pos_z);
		SetPlayerPos(playerid, pos_x, pos_y, (pos_z + 2.0));
	}
	if(playerSpawnTimer[playerid])
	{
		KillTimer(playerSpawnTimer[playerid]);
		playerSpawnTimer[playerid] = 0;
	}
	playerSpawn{playerid} = 1;
	return SpawnPlayer(playerid);
}
#if defined _ALS_SpawnPlayer
	#undef SpawnPlayer
#else
	#define	_ALS_SpawnPlayer
#endif
#define SpawnPlayer ac_SpawnPlayer

stock ac_PutPlayerInVehicle(playerid, vehid, seatid)
{
    if(GetPlayerVehicleID(playerid)) return 0;
    AC_FORPLAYER(otherid) if(IsPlayerInVehicle(otherid, vehid) && seatid == GetPlayerVehicleSeat(otherid)) return 0;
    playerCheckFly{playerid} = SleepTime(playerid);
    playerVehicleEnter[playerid] = vehid;
	playerVehicleEnterTime[playerid] = GetTickDiffAC(GetTickCount(), (SleepTime(playerid) * 1000));
	return PutPlayerInVehicle(playerid, vehid, seatid);
}
#if defined _ALS_PutPlayerInVehicle
	#undef PutPlayerInVehicle
#else
	#define	_ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle ac_PutPlayerInVehicle

stock ac_SetPlayerAmmo(playerid, weaponid, ammo)
{
   	playerCheckWeapon{playerid} = SleepTime(playerid);
   	new slot = ac_WeaponSlots[weaponid];
   	if(slot != -1) ac_playerAmmo[playerid][slot] = ammo;
	return SetPlayerAmmo(playerid, weaponid, ammo);
}
#if defined _ALS_SetPlayerAmmo
	#undef SetPlayerAmmo
#else
	#define	_ALS_SetPlayerAmmo
#endif
#define SetPlayerAmmo ac_SetPlayerAmmo

stock ac_GivePlayerWeapon(playerid, weaponid, ammo)
{
   	playerCheckWeapon{playerid} = SleepTime(playerid);
   	new slot = ac_WeaponSlots[weaponid];
   	if(slot != -1)
   	{
	   	ac_playerAmmo[playerid][slot] += ammo;
	   	ac_playerWeaponID[playerid][slot] = weaponid;
   	}
	return GivePlayerWeapon(playerid, weaponid, ammo);
}
#if defined _ALS_GivePlayerWeapon
	#undef GivePlayerWeapon
#else
	#define	_ALS_GivePlayerWeapon
#endif
#define GivePlayerWeapon ac_GivePlayerWeapon

stock ac_ResetPlayerWeapons(playerid)
{
   	playerCheckWeapon{playerid} = SleepTime(playerid);
   	for(new id = 12; id >= 0; id--) ac_playerAmmo[playerid][id] = ac_playerWeaponID[playerid][id] = 0;
	return ResetPlayerWeapons(playerid);
}
#if defined _ALS_ResetPlayerWeapons
	#undef ResetPlayerWeapons
#else
	#define	_ALS_ResetPlayerWeapons
#endif
#define ResetPlayerWeapons ac_ResetPlayerWeapons
/*
stock ac_CreateVehicle(modelid, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_r, color1, color2, respawn, siren = 0)
{
	new vehid = CreateVehicle(modelid, pos_x, pos_y, pos_z, pos_r, color1, color2, respawn, siren);
	if(vehid == 0xFFFF) return 0xFFFF;
    vehicleHealth[vehid] = 1000.0;
	return vehid;
}
#if defined _ALS_CreateVehicle
    #undef CreateVehicle
#else
    #define	_ALS_CreateVehicle
#endif
#define CreateVehicle ac_CreateVehicle

stock ac_AddStaticVehicle(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2)
{
	new vehid = AddStaticVehicle(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2);
	if(vehid == 0xFFFF) return 0xFFFF;
    vehicleHealth[vehid] = 1000.0;
	return vehid;
}
#if defined _ALS_AddStaticVehicle
    #undef AddStaticVehicle
#else
    #define	_ALS_AddStaticVehicle
#endif
#define AddStaticVehicle ac_AddStaticVehicle

stock ac_AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay, addsiren = 0)
{
	new vehid = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2, respawn_delay, addsiren);
	if(vehid == 0xFFFF) return 0xFFFF;
    vehicleHealth[vehid] = 1000.0;
	return vehid;
}
#if defined _ALS_AddStaticVehicleEx
    #undef AddStaticVehicleEx
#else
    #define	_ALS_AddStaticVehicleEx
#endif
#define AddStaticVehicleEx ac_AddStaticVehicleEx

stock AC_CreateVehicle(modelid, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_r, color1, color2, respawn, siren = 0)
{
    new vehicleID = CreateVehicle(modelid, pos_x, pos_y, pos_z, pos_r, color1, color2, respawn, siren);
    if(vehicleID == 0xFFFF) return 0xFFFF;
    vehicleHealth[vehicleID] = 1000.0;
    VehInfo[vehicleID][vModel] = modelid;
    VehInfo[vehicleID][vColors1] = color1;
    VehInfo[vehicleID][vColors2] = color1;
    VehInfo[vehicleID][vFuel] = 200.0;
    Fuell[vehicleID] = 200.0;
    return vehicleID;
}
#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
	#define _ALS_CreateVehicle
#endif
#define CreateVehicle AC_CreateVehicle
stock AC_AddStaticVehicle(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2)
{
    new vehicleID = AddStaticVehicle(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2);
    if(vehicleID == 0xFFFF) return 0xFFFF;
    vehicleHealth[vehicleID] = 1000.0;
    VehInfo[vehicleID][vModel] = modelid;
    VehInfo[vehicleID][vColors1] = color1;
    VehInfo[vehicleID][vColors2] = color1;
    VehInfo[vehicleID][vFuel] = 200.0;
    Fuell[vehicleID] = 200.0;
    return vehicleID;
}
#if defined _ALS_AddStaticVehicle
	#undef AddStaticVehicle
#else
	#define _ALS_AddStaticVehicle
#endif
#define AddStaticVehicle AC_AddStaticVehicle
stock AC_AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay, addsiren = 0)
{
    new vehicleID = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2, respawn_delay, addsiren);
    if(vehicleID == 0xFFFF) return 0xFFFF;
    vehicleHealth[vehicleID] = 1000.0;
    VehInfo[vehicleID][vModel] = modelid;
    VehInfo[vehicleID][vColors1] = color1;
    VehInfo[vehicleID][vColors2] = color1;
    VehInfo[vehicleID][vFuel] = 200.0;
    Fuell[vehicleID] = 200.0;
    return vehicleID;
}
#if defined _ALS_AddStaticVehicleEx
	#undef AddStaticVehicleEx
#else
	#define _ALS_AddStaticVehicleEx
#endif
#define AddStaticVehicleEx AC_AddStaticVehicleEx
stock AC_DestroyVehicle(vehicleid)
{
    if(vehicleID == 0xFFFF) return 0xFFFF;
    VehInfo[vehicleid][vModel] = 0;
    return DestroyVehicle(vehicleid);
}
#if defined _ALS_DestroyVehicle
	#undef DestroyVehicle
#else
	#define _ALS_DestroyVehicle
#endif
#define DestroyVehicle AC_DestroyVehicle*/
stock Text3D:ac_Create3DTextLabel(text[], color, Float:pos_x, Float:pos_y, Float:pos_z, Float:dist, worldid, testlos = 0)
{
	new Text3D:textid = Create3DTextLabel(text, color, pos_x, pos_y, pos_z, Float:dist, worldid, testlos);
	if(_:textid == 0xFFFF) return Text3D:0xFFFF;
	ac_text3dValid{_:textid} = 1;
	return textid;
}
#if defined _ALS_Create3DTextLabel
    #undef Create3DTextLabel
#else
    #define	_ALS_Create3DTextLabel
#endif
#define Create3DTextLabel ac_Create3DTextLabel

stock ac_Delete3DTextLabel(Text3D:textid)
{
	if(!IsValid3DTextLabelAC(textid)) return 0;
    ac_text3dValid{_:textid} = 0;
    return Delete3DTextLabel(textid);
}
#if defined _ALS_Delete3DTextLabel
    #undef Delete3DTextLabel
#else
    #define	_ALS_Delete3DTextLabel
#endif
#define Delete3DTextLabel ac_Delete3DTextLabel

stock ac_Update3DTextLabelText(Text3D:textid, color, acstr[])
{
    if(!IsValid3DTextLabelAC(textid)) return 0;
    return Update3DTextLabelText(textid, color, acstr);
}
#if defined _ALS_Update3DTextLabelText
    #undef Update3DTextLabelText
#else
    #define	_ALS_Update3DTextLabelText
#endif
#define Update3DTextLabelText ac_Update3DTextLabelText

public OnPlayerConnect(playerid)
{
	GetPlayerIp(playerid, ac_playerIP[playerid], 16);
	GetPlayerName(playerid, ac_playerName[playerid], 25);
	if(playerUseSlot{playerid}) CheatDetected(playerid, AC_SPOOFCONN);
	playerUseSlot{playerid} = 1;
	
	new acstr[72], count = 4;
    if(!GetPlayerVersion(playerid, acstr, 14) || strfind(acstr, AC_CLIENT_VERSION) == -1) CheatDetected(playerid, AC_IVERSION);
 	AC_FORPLAYER(otherid) if(otherid != playerid && !IsPlayerNPC(otherid) && !strcmp(ac_playerIP[otherid], ac_playerIP[playerid])) { if(--count <= 0) { CheatDetected(playerid, AC_MAXCONNIP); break; }}
 	
    gpci(playerid, acstr, sizeof(acstr));
    if(!strcmp(acstr, "ED40ED0E8089CC44C08EE9580F4C8C44EE8EE990") || !strcmp(acstr, "355A593448535549594B48545046504E37513330")) AddToWarningPanel(playerid, "raksamp");

	playerSpawn{playerid} =
	playerFakeKill{playerid} =
	playerKickTimer[playerid] =
	playerInModShop{playerid} =
	playerSpawnTimer[playerid] =
	playerWarningRcon{playerid} =
	ac_playerShotHits[playerid] =
	playerWarningSpeed{playerid} =
	playerWarningCarShot{playerid} = 0;
	
    playerCheckFly{playerid} =
    playerCheckRepair{playerid} =
	playerCheckWeapon{playerid} =
	playerCheckArmour{playerid} =
	playerCheckHealth{playerid} = 255;
	for(new id = (AC_NULLWARN - 1); id >= 0; id--) playerNullWarningTimer[playerid][id] = 0;
	for(new id = 12; id >= 0; id--) ac_playerAmmo[playerid][id] = ac_playerWeaponID[playerid][id] = 0;

	acstr = "proxy.mind-media.com/block/proxycheck.php?ip=";
	strcat(acstr, ac_playerIP[playerid]);
	HTTP(playerid, HTTP_GET, acstr, "", "ac_CheckProxy");
    #if defined ac_OnPlayerConnect
		return ac_OnPlayerConnect(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerConnect
	#undef OnPlayerConnect
#else
	#define _ALS_OnPlayerConnect
#endif
#if defined ac_OnPlayerConnect
	forward ac_OnPlayerConnect(playerid);
#endif
#define OnPlayerConnect ac_OnPlayerConnect

public OnPlayerSpawn(playerid)
{
	if(!playerSpawn{playerid}) CheatDetected(playerid, AC_SPAWN);
	if(!playerSpawnTimer[playerid]) playerSpawnTimer[playerid] = SetTimerEx("ac_SpawnTimer", (SleepTime(playerid) * 1000), 0, "i", playerid);

    playerFakeKill{playerid} = 0;
    playerCheckFly{playerid} =
    playerCheckRepair{playerid} =
	playerCheckWeapon{playerid} =
	playerCheckArmour{playerid} =
	playerCheckHealth{playerid} = SleepTime(playerid);
    
	SetPlayerArmour(playerid, 0.0);
	SetPlayerHealth(playerid, 100.0);
    for(new id = 12; id >= 0; id--) if(ac_playerWeaponID[playerid][id] && ac_playerAmmo[playerid][id]) GivePlayerWeapon(playerid, ac_playerWeaponID[playerid][id], ac_playerAmmo[playerid][id]);
    #if defined ac_OnPlayerSpawn
		return ac_OnPlayerSpawn(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerSpawn
	#undef OnPlayerSpawn
#else
	#define _ALS_OnPlayerSpawn
#endif
#if defined ac_OnPlayerSpawn
	forward ac_OnPlayerSpawn(playerid);
#endif
#define OnPlayerSpawn ac_OnPlayerSpawn

public OnPlayerDisconnect(playerid, reason)
{
    playerUseSlot{playerid} = 0;
    if(playerKickTimer[playerid]) KillTimer(playerKickTimer[playerid]);
    if(playerSpawnTimer[playerid]) KillTimer(playerSpawnTimer[playerid]);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehid = GetPlayerVehicleID(playerid);
		if(vehicleHealth[vehid] > 0.0) SetVehicleHealth(vehid, vehicleHealth[vehid]);
	}
    #if defined ac_OnPlayerDisconnect
    	return ac_OnPlayerDisconnect(playerid, reason);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerDisconnect
	#undef OnPlayerDisconnect
#else
	#define _ALS_OnPlayerDisconnect
#endif
#if defined ac_OnPlayerDisconnect
	forward ac_OnPlayerDisconnect(playerid, reason);
#endif
#define OnPlayerDisconnect ac_OnPlayerDisconnect

public OnPlayerDeath(playerid, killerid, reason)
{
	if(killerid == playerid || playerFakeKill{playerid}) CheatDetected(playerid, AC_IKILL);
	if(killerid != 0xFFFF && !IsPlayerConnected(killerid)) CheatDetected(playerid, AC_IKILLER);
	if(killerid == 0xFFFF && reason == 255 && GetTickDiffAC(GetTickCount(), playerLastHitTick[playerid]) < (AC_MAX_PING * 2)) killerid = playerLastHitID[playerid];
	if(playerSpawnTimer[playerid])
	{
		KillTimer(playerSpawnTimer[playerid]);
		playerSpawnTimer[playerid] = 0;
	}
	playerSpawn{playerid} = 1;
	playerFakeKill{playerid} = 1;
	playerCheckFly{playerid} =
    playerCheckRepair{playerid} =
	playerCheckWeapon{playerid} =
	playerCheckArmour{playerid} =
	playerCheckHealth{playerid} = 255;
	ResetPlayerWeapons(playerid);
	#if defined ac_OnPlayerDeath
		return ac_OnPlayerDeath(playerid, killerid, reason);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerDeath
	#undef OnPlayerDeath
#else
	#define _ALS_OnPlayerDeath
#endif
#if defined ac_OnPlayerDeath
	forward ac_OnPlayerDeath(playerid, killerid, reason);
#endif
#define OnPlayerDeath ac_OnPlayerDeath

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(!(BULLET_HIT_TYPE_NONE <= hittype <= BULLET_HIT_TYPE_PLAYER_OBJECT) || !(22 <= weaponid <= 34) || ac_playerPaused[playerid] > 3) return 0;
    if(hittype != BULLET_HIT_TYPE_NONE && (floatabs(fX) >= 1000.0 || floatabs(fY) >= 1000.0 || floatabs(fZ) >= 1000.0)) { CheatDetected(playerid, AC_CRASH1); return 0; }

    new Float:pos_px, Float:pos_py, Float:pos_pz, Float:pos_sx, Float:pos_sy, Float:pos_sz;
	GetPlayerLastShotVectors(playerid, pos_px, pos_py, pos_pz, pos_sx, pos_sy, pos_sz);
	if(floatabs(pos_px) >= 35000.0 || floatabs(pos_py) >= 35000.0 || floatabs(pos_pz) >= 35000.0 || floatabs(pos_sx) >= 35000.0 || floatabs(pos_sy) >= 35000.0 || floatabs(pos_sz) >= 35000.0) return 0;

	if(playerCheckWeapon{playerid} <= 0)
	{
		new weap, ammo;
	  	GetPlayerWeaponData(playerid, ac_WeaponSlots[weaponid], weap, ammo);
	    ac_playerAmmo[playerid][ac_WeaponSlots[weaponid]]--;
	    if(ammo > (ac_playerAmmo[playerid][ac_WeaponSlots[weaponid]] + 20)) CheatDetected(playerid, AC_AMMO);
	    if(weaponid != ac_playerWeaponID[playerid][ac_WeaponSlots[weaponid]]) CheatDetected(playerid, AC_WEAPON);
 	}
 	
 	new Float:dist = GetPlayerDistanceFromPoint(playerid, pos_sx, pos_sy, pos_sz);
 	if(hittype == BULLET_HIT_TYPE_PLAYER) { if(dist > 15.0 && GetPlayerSpeedAC(hitid) > 2) { if(++ac_playerShotHits[playerid] > 20)
	{
	    ac_playerShotHits[playerid] = 0;
	    AddToWarningPanel(playerid, "aim");
	}}}
	else ac_playerShotHits[playerid] = 0;
	
 	new count = WeaponReload[weaponid - 22];
	if(GetPlayerVehicleID(playerid)) switch(weaponid)
	{
		case 22..24, 26..32: count = 150;
	    default: count = 900;
    }
 	if(GetTickDiffAC(GetTickCount(), playerLastShot[playerid]) < count) { if(++playerWarningRapid{playerid} > 10) CheatDetected(playerid, AC_RAPID); }
	else playerWarningRapid{playerid} = 0;
	playerLastShot[playerid] = GetTickCount();
	
	switch(hittype)
	{
		case BULLET_HIT_TYPE_PLAYER:
        {
            if(ac_playerPaused[hitid] > 3 || !IsPlayerInRangeOfPoint(hitid, MaxDistShot[weaponid - 22], pos_px, pos_py, pos_pz)) return 0;
            if(fX == 0.0 && fY == 0.0 && fZ == 0.0) CheatDetected(playerid, AC_AIM1);
            
			if(!IsPlayerInAnyVehicle(hitid) && GetPlayerSurfingVehicleID(hitid) == 0xFFFF && GetPlayerSurfingObjectID(hitid) == 0xFFFF && !IsPlayerInRangeOfPoint(hitid, 5.0, pos_sx, pos_sy, pos_sz)) { if(++playerWarningProAim{playerid} > 10) CheatDetected(playerid, AC_AIM2); }
			else playerWarningProAim{playerid} = 0;
			
			new Float:ppos_z;
		 	GetPlayerPos(playerid, ppos_z, ppos_z, ppos_z);
			if(floatabs(ppos_z - pos_pz) < 0.01) { if(++playerWarningAim0{playerid} > 2) CheatDetected(playerid, AC_AIM3); }
			else playerWarningAim0{playerid} = 0;
			
			new Float:hpos_z;
		 	GetPlayerPos(hitid, hpos_z, hpos_z, hpos_z);
		 	if(floatabs(hpos_z - pos_sz) < 0.01) { if(++playerWarningAim3{playerid} > 2) CheatDetected(playerid, AC_AIM0); }
		 	else playerWarningAim3{playerid} = 0;
		}
		case BULLET_HIT_TYPE_VEHICLE: if(!GetVehicleModel(hitid)) return 0;
		case BULLET_HIT_TYPE_OBJECT: if(!IsValidObject(hitid)) return 0;
		case BULLET_HIT_TYPE_PLAYER_OBJECT: if(!IsValidPlayerObject(playerid, hitid)) return 0;
	}
	
	new id = 1;
	#if defined ac_OnPlayerWeaponShot
 		id = ac_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
    #endif
	if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
		if(!id) return 0;
		new Float:heal = ac_playerHealth[hitid], Float:arm = ac_playerArmour[hitid], Float:dmg = WeaponDamage[weaponid - 22], Float:ndmg;
		switch(weaponid)
		{
		    case 25: ndmg = (dist / 7.5);
		    case 26: ndmg = (dist / 1.8);
		    case 27: ndmg = (dist / 4.5);
		}
		if(ndmg >= 1.0 && 5.0 <= dist <= MaxDistShot[weaponid - 22]) dmg = (dmg / ndmg);
		#if defined OnPlayerDamageStatusUpdateAC
		    if(!OnPlayerDamageStatusUpdateAC(playerid, hitid, dmg, arm, weaponid)) return 0;
		#endif
		playerLastHitID[hitid] = playerid;
        playerLastHitTick[hitid] = GetTickCount();
		if(!arm)
	    {
	        if((heal - dmg) <= 0.0)
			{
			    new ret = 1;
			    #if defined OnPlayerDeathFromWeaponAC
					ret = OnPlayerDeathFromWeaponAC(hitid, playerid, weaponid);
				#endif
				if(ret)
				{
				    ResetPlayerWeapons(hitid);
					SpawnPlayer(hitid);
				}
			}
	        else SetPlayerHealth(hitid, (heal - dmg));
	        return 0;
	    }
		if(dmg > arm)
        {
            #if defined OnPlayerResetArmourAC
				OnPlayerResetArmourAC(hitid);
			#endif
            SetPlayerArmour(hitid, 0.0);
            if((heal - (dmg - arm)) <= 0.0)
            {
                new ret = 1;
			    #if defined OnPlayerDeathFromWeaponAC
					ret = OnPlayerDeathFromWeaponAC(hitid, playerid, weaponid);
				#endif
				if(ret)
				{
				    ResetPlayerWeapons(hitid);
					SpawnPlayer(hitid);
				}
			}
	        else SetPlayerHealth(hitid, (heal - (dmg - arm)));
        }
        else SetPlayerArmour(hitid, (arm - dmg));
		return 0;
  	}
	return id;
}
#if defined _ALS_OnPlayerWeaponShot
	#undef OnPlayerWeaponShot
#else
	#define _ALS_OnPlayerWeaponShot
#endif
#if defined ac_OnPlayerWeaponShot
	forward ac_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
#endif
#define OnPlayerWeaponShot ac_OnPlayerWeaponShot

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    PublicFlood(playerid, 11);
    playerCheckFly{playerid} = SleepTime(playerid);
    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) playerRemoveVehicle{playerid} = 0;
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        new vehid = GetPlayerVehicleID(playerid);
		if(vehid != playerVehicleEnter[playerid]) CheatDetected(playerid, AC_CARHACK1);
	    if(GetTickDiffAC(GetTickCount(), playerVehicleEnterTime[playerid]) < 600 && !IsWaterTransportAC(vehid)) CheatDetected(playerid, AC_CARHACK2);
	}
    if(newstate == PLAYER_STATE_DRIVER)
    {
        new vehid = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehid);
        if((model == 520 || model == 425) && GetPlayerWeapon(playerid) == 34) SetPlayerArmedWeapon(playerid, 0);
        if(!model || MaxPassengers[model - 400] == 15 || GetPlayerVehicleSeat(playerid)) CheatDetected(playerid, AC_CARHACK3);
        vehicleOccupied[vehid][0] = playerid;
	}
    if(newstate == PLAYER_STATE_PASSENGER)
    {
        new vehid = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehid), seat = GetPlayerVehicleSeat(playerid);
 		if(!model || MaxPassengers[model - 400] == 15 || !(1 <= seat <= MaxPassengers[model - 400])) CheatDetected(playerid, AC_CARHACK3);
 		else vehicleOccupied[vehid][seat] = playerid;
	}
	if(newstate == oldstate || (newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_PASSENGER) || (newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_DRIVER)) CheatDetected(playerid, AC_ISTATE);
    #if defined ac_OnPlayerStateChange
    	return ac_OnPlayerStateChange(playerid, newstate, oldstate);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerStateChange
	#undef OnPlayerStateChange
#else
	#define _ALS_OnPlayerStateChange
#endif
#if defined ac_OnPlayerStateChange
	forward ac_OnPlayerStateChange(playerid, newstate, oldstate);
#endif
#define OnPlayerStateChange ac_OnPlayerStateChange

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    PublicFlood(playerid, 0);
	#if defined ac_OnDialogResponse
	    return ac_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnDialogResponse
	#undef OnDialogResponse
#else
	#define _ALS_OnDialogResponse
#endif
#if defined ac_OnDialogResponse
    forward ac_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
#endif
#define OnDialogResponse ac_OnDialogResponse

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    if(passenger_seat && GetPlayerVehicleID(playerid))
    {
	    new Float:pos_x, Float:pos_y, Float:pos_z;
		GetVehiclePos(vehicleid, pos_x, pos_y, pos_z);
		if((new_z - pos_z) > -5.0 && (floatabs(vel_x) >= floatabs(playerPassengerVelX[vehicleid]) > 0.3 || floatabs(vel_y) >= floatabs(playerPassengerVelY[vehicleid]) > 0.3))
		{
			if(++playerWarningCarShot{playerid} > 2) CheatDetected(playerid, AC_CARSHOT);
			playerNullWarningTimer[playerid][1] = 10;
		}
		if(new_x > 3000.0 && new_y == 0.0 && new_z > 3000.0) { CheatDetected(playerid, AC_CRASH7); return 0; }
   	}
   	if(GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z) > 15.0)
	{
	    new Float:pos_x, Float:pos_y, Float:pos_z;
		GetVehiclePos(vehicleid, pos_x, pos_y, pos_z);
		if(pos_z > -70.0) { SetVehiclePos(vehicleid, pos_x, pos_y, pos_z); return 0; }
	}
	playerPassengerVelX[vehicleid] = vel_x;
	playerPassengerVelY[vehicleid] = vel_y;
	playerPassengerVelZ[vehicleid] = vel_z;
    #if defined ac_OnUnoccupiedVehicleUpdate
	    return ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnUnoccupiedVehicleUpd
	#undef OnUnoccupiedVehicleUpdate
#else
	#define _ALS_OnUnoccupiedVehicleUpd
#endif
#if defined ac_OnUnoccupiedVehicleUpdate
    forward ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z);
#endif
#define OnUnoccupiedVehicleUpdate ac_OnUnoccupiedVehicleUpdate

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    PublicFlood(playerid, 6);
	playerVehicleEnter[playerid] = vehicleid;
	playerVehicleEnterTime[playerid] = GetTickCount();
	#if defined ac_OnPlayerEnterVehicle
		return ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerEnterVeh
	#undef OnPlayerEnterVehicle
#else
	#define _ALS_OnPlayerEnterVeh
#endif
#if defined ac_OnPlayerEnterVehicle
	forward ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
#endif
#define OnPlayerEnterVehicle ac_OnPlayerEnterVehicle

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    PublicFlood(playerid, 1);
	playerInModShop{playerid} = !!enterexit;
	playerCheckFly{playerid} = SleepTime(playerid);
 	#if defined ac_OnEnterExitModShop
		return ac_OnEnterExitModShop(playerid, enterexit, interiorid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnEnterExitModShop
	#undef OnEnterExitModShop
#else
	#define _ALS_OnEnterExitModShop
#endif
#if defined ac_OnEnterExitModShop
	forward ac_OnEnterExitModShop(playerid, enterexit, interiorid);
#endif
#define OnEnterExitModShop ac_OnEnterExitModShop

public OnRconLoginAttempt(ip[], password[], success)
{
	AC_FORPLAYER(playerid) if(!strcmp(ip, ac_playerIP[playerid]))
	{
	    if(success) playerWarningRcon{playerid} = 0;
		else { if(++playerWarningRcon{playerid} > 2) CheatDetected(playerid, AC_IRCON); }
	}
 	#if defined ac_OnRconLoginAttempt
		return ac_OnRconLoginAttempt(ip, password, success);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnRconLoginAttempt
	#undef OnRconLoginAttempt
#else
	#define _ALS_OnRconLoginAttempt
#endif
#if defined ac_OnRconLoginAttempt
	forward ac_OnRconLoginAttempt(ip[], password[], success);
#endif
#define OnRconLoginAttempt ac_OnRconLoginAttempt

public OnVehicleMod(playerid, vehicleid, componentid)
{
    PublicFlood(playerid, 12);
    if(!playerInModShop{playerid}) CheatDetected(playerid, AC_IEMODSHOP);
    if(!IsComponentidCompatibleAC(GetVehicleModel(vehicleid), componentid))
	{
	    SetVehicleToRespawn(vehicleid);
		CheatDetected(playerid, AC_IVEHMOD);
	}
    #if defined ac_OnVehicleMod
		return ac_OnVehicleMod(playerid, vehicleid, componentid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleMod
	#undef OnVehicleMod
#else
	#define _ALS_OnVehicleMod
#endif
#if defined ac_OnVehicleMod
	forward ac_OnVehicleMod(playerid, vehicleid, componentid);
#endif
#define OnVehicleMod ac_OnVehicleMod

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    PublicFlood(playerid, 13);
    if(!playerInModShop{playerid}) CheatDetected(playerid, AC_IEMODSHOP);
    if(!(0 <= paintjobid <= 2))
	{
	    SetVehicleToRespawn(vehicleid);
		CheatDetected(playerid, AC_IPAINTJOB);
	}
	#if defined ac_OnVehiclePaintjob
		return ac_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehiclePaintjob
	#undef OnVehiclePaintjob
#else
	#define _ALS_OnVehiclePaintjob
#endif
#if defined ac_OnVehiclePaintjob
	forward ac_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
#endif
#define OnVehiclePaintjob ac_OnVehiclePaintjob

public OnPlayerPickUpPickup(playerid, pickupid)
{
    PublicFlood(playerid, 8);
	#if defined ac_OnPlayerPickUpPickup
		return ac_OnPlayerPickUpPickup(playerid, pickupid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerPickUpPickup
    #undef OnPlayerPickUpPickup
#else
    #define _ALS_OnPlayerPickUpPickup
#endif
#if defined ac_OnPlayerPickUpPickup
	forward ac_OnPlayerPickUpPickup(playerid, pickupid);
#endif
#define OnPlayerPickUpPickup ac_OnPlayerPickUpPickup

#if defined PAWNCMD_INC_
	public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
	{
	    PublicFlood(playerid, 5);
		#if defined ac_OnPlayerCommandReceived
			return ac_OnPlayerCommandReceived(playerid, cmd, params, flags);
		#else
		    return 1;
		#endif
	}
	#if defined _ALS_OnPlayerCommandReceived
	    #undef OnPlayerCommandReceived
	#else
	    #define _ALS_OnPlayerCommandReceived
	#endif
	#if defined ac_OnPlayerCommandReceived
		forward ac_OnPlayerCommandReceived(playerid, cmd[], params[], flags);
	#endif
	#define OnPlayerCommandReceived ac_OnPlayerCommandReceived
#else
    public OnPlayerCommandReceived(playerid, cmdtext[])
	{
	    PublicFlood(playerid, 5);
		#if defined ac_OnPlayerCommandReceived
			return ac_OnPlayerCommandReceived(playerid, cmdtext);
		#else
		    return 1;
		#endif
	}
	#if defined _ALS_OnPlayerCommandReceived
	    #undef OnPlayerCommandReceived
	#else
	    #define _ALS_OnPlayerCommandReceived
	#endif
	#if defined ac_OnPlayerCommandReceived
		forward ac_OnPlayerCommandReceived(playerid, cmdtext[]);
	#endif
	#define OnPlayerCommandReceived ac_OnPlayerCommandReceived
#endif

public OnPlayerRequestClass(playerid, classid)
{
    PublicFlood(playerid, 9);
	#if defined ac_OnPlayerRequestClass
		return ac_OnPlayerRequestClass(playerid, classid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerRequestClass
    #undef OnPlayerRequestClass
#else
    #define _ALS_OnPlayerRequestClass
#endif
#if defined ac_OnPlayerRequestClass
	forward ac_OnPlayerRequestClass(playerid, classid);
#endif
#define OnPlayerRequestClass ac_OnPlayerRequestClass

public OnPlayerRequestSpawn(playerid)
{
    PublicFlood(playerid, 19);
    if(!GetPlayerState(playerid))
	{
	    if(playerSpawnTimer[playerid])
		{
			KillTimer(playerSpawnTimer[playerid]);
			playerSpawnTimer[playerid] = 0;
		}
		playerSpawn{playerid} = 1;
	}
	#if defined ac_OnPlayerRequestSpawn
		return ac_OnPlayerRequestSpawn(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerRequestSpawn
    #undef OnPlayerRequestSpawn
#else
    #define _ALS_OnPlayerRequestSpawn
#endif
#if defined ac_OnPlayerRequestSpawn
	forward ac_OnPlayerRequestSpawn(playerid);
#endif
#define OnPlayerRequestSpawn ac_OnPlayerRequestSpawn

public OnPlayerSelectedMenuRow(playerid, row)
{
    PublicFlood(playerid, 10);
	#if defined ac_OnPlayerSelectedMenuRow
		return ac_OnPlayerSelectedMenuRow(playerid, row);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerSelectedMenuRow
    #undef OnPlayerSelectedMenuRow
#else
    #define _ALS_OnPlayerSelectedMenuRow
#endif
#if defined ac_OnPlayerSelectedMenuRow
	forward ac_OnPlayerSelectedMenuRow(playerid, row);
#endif
#define OnPlayerSelectedMenuRow ac_OnPlayerSelectedMenuRow

public OnPlayerExitedMenu(playerid)
{
    PublicFlood(playerid, 20);
	#if defined ac_OnPlayerExitedMenu
		return ac_OnPlayerExitedMenu(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerExitedMenu
    #undef OnPlayerExitedMenu
#else
    #define _ALS_OnPlayerExitedMenu
#endif
#if defined ac_OnPlayerExitedMenu
	forward ac_OnPlayerExitedMenu(playerid);
#endif
#define OnPlayerExitedMenu ac_OnPlayerExitedMenu

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    PublicFlood(playerid, 3);
    if(source) CheatDetected(playerid, AC_INPCLICK);
	#if defined ac_OnPlayerClickPlayer
		return ac_OnPlayerClickPlayer(playerid, clickedplayerid, source);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerClickPlayer
    #undef OnPlayerClickPlayer
#else
    #define _ALS_OnPlayerClickPlayer
#endif
#if defined ac_OnPlayerClickPlayer
	forward ac_OnPlayerClickPlayer(playerid, clickedplayerid, source);
#endif
#define OnPlayerClickPlayer ac_OnPlayerClickPlayer

public OnVehicleDeath(vehicleid, killerid)
{
    PublicFlood(killerid, 15);
   	#if defined ac_OnVehicleDeath
		return ac_OnVehicleDeath(vehicleid, killerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleDeath
    #undef OnVehicleDeath
#else
    #define _ALS_OnVehicleDeath
#endif
#if defined ac_OnVehicleDeath
	forward ac_OnVehicleDeath(vehicleid, killerid);
#endif
#define OnVehicleDeath ac_OnVehicleDeath

public OnVehicleSpawn(vehicleid)
{
    vehicleHealth[vehicleid] = 1000.0;
	#if defined ac_OnVehicleSpawn
		return ac_OnVehicleSpawn(vehicleid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleSpawn
    #undef OnVehicleSpawn
#else
    #define _ALS_OnVehicleSpawn
#endif
#if defined ac_OnVehicleSpawn
	forward ac_OnVehicleSpawn(vehicleid);
#endif
#define OnVehicleSpawn ac_OnVehicleSpawn

public OnGameModeInit()
{
	SetTimer("ac_MainUpdate", 1000, 1);
	SetTimer("ac_FastUpdate", 200, 1);

	new Float:pos = 436.0693;
    for(new id; id < AC_WARNLINE; id++)
    {
        new Text:text = warningPanelTD[id] = TextDrawCreate(635.5764, pos, "_"); pos -= 7.0;
        TextDrawLetterSize(text, 0.1804, 0.8024);
		TextDrawAlignment(text, 3);
		TextDrawColor(text, -1);
		TextDrawSetOutline(text, 0);
		TextDrawBackgroundColor(text, 255);
		TextDrawFont(text, 1);
		TextDrawSetProportional(text, 1);
		TextDrawSetShadow(text, 1);
		warningPanelText[id] = "_";
	}
	#if defined ac_OnGameModeInit
		return ac_OnGameModeInit();
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnGameModeInit
    #undef OnGameModeInit
#else
    #define _ALS_OnGameModeInit
#endif
#if defined ac_OnGameModeInit
	forward ac_OnGameModeInit();
#endif
#define OnGameModeInit ac_OnGameModeInit

public OnPlayerUpdate(playerid)
{
	if(ac_playerPaused[playerid] > 3)
	{
	    #if defined OnPlayerExitPausedAC
	        OnPlayerExitPausedAC(playerid);
		#endif
		playerCheckFly{playerid} = SleepTime(playerid);
	}
    ac_playerPaused[playerid] = 0;
	#if defined ac_OnPlayerUpdate
		return ac_OnPlayerUpdate(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerUpdate
    #undef OnPlayerUpdate
#else
    #define _ALS_OnPlayerUpdate
#endif
#if defined ac_OnPlayerUpdate
	forward ac_OnPlayerUpdate(playerid);
#endif
#define OnPlayerUpdate ac_OnPlayerUpdate

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    PublicFlood(playerid, 24);
	#if defined ac_OnVehicleDamageStatusUpd
		return ac_OnVehicleDamageStatusUpd(vehicleid, playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleDamageStatus
    #undef OnVehicleDamageStatusUpdate
#else
    #define _ALS_OnVehicleDamageStatus
#endif
#if defined ac_OnVehicleDamageStatusUpd
	forward ac_OnVehicleDamageStatusUpd(vehicleid, playerid);
#endif
#define OnVehicleDamageStatusUpdate ac_OnVehicleDamageStatusUpd

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    PublicFlood(playerid, 2);
	#if defined ac_OnPlayerClickMap
		return ac_OnPlayerClickMap(playerid, fX, fY, fZ);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerClickMap
    #undef OnPlayerClickMap
#else
    #define _ALS_OnPlayerClickMap
#endif
#if defined ac_OnPlayerClickMap
	forward ac_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
#endif
#define OnPlayerClickMap ac_OnPlayerClickMap

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    PublicFlood(playerid, 4);
	#if defined ac_OnPlayerClickTextDraw
		return ac_OnPlayerClickTextDraw(playerid, clickedid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerClickTextDraw
    #undef OnPlayerClickTextDraw
#else
    #define _ALS_OnPlayerClickTextDraw
#endif
#if defined ac_OnPlayerClickTextDraw
	forward ac_OnPlayerClickTextDraw(playerid, Text:clickedid);
#endif
#define OnPlayerClickTextDraw ac_OnPlayerClickTextDraw

public OnPlayerExitVehicle(playerid, vehicleid)
{
    PublicFlood(playerid, 7);
	#if defined ac_OnPlayerExitVehicle
		return ac_OnPlayerExitVehicle(playerid, vehicleid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerExitVehicle
    #undef OnPlayerExitVehicle
#else
    #define _ALS_OnPlayerExitVehicle
#endif
#if defined ac_OnPlayerExitVehicle
	forward ac_OnPlayerExitVehicle(playerid, vehicleid);
#endif
#define OnPlayerExitVehicle ac_OnPlayerExitVehicle

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    PublicFlood(playerid, 14);
	#if defined ac_OnVehicleRespray
		return ac_OnVehicleRespray(playerid, vehicleid, color1, color2);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleRespray
    #undef OnVehicleRespray
#else
    #define _ALS_OnVehicleRespray
#endif
#if defined ac_OnVehicleRespray
	forward ac_OnVehicleRespray(playerid, vehicleid, color1, color2);
#endif
#define OnVehicleRespray ac_OnVehicleRespray

public OnPlayerText(playerid, text[])
{
    PublicFlood(playerid, 16);
	#if defined ac_OnPlayerText
		return ac_OnPlayerText(playerid, text);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerText
    #undef OnPlayerText
#else
    #define _ALS_OnPlayerText
#endif
#if defined ac_OnPlayerText
	forward ac_OnPlayerText(playerid, text[]);
#endif
#define OnPlayerText ac_OnPlayerText

public OnPlayerEnterCheckpoint(playerid)
{
    PublicFlood(playerid, 17);
	#if defined ac_OnPlayerEnterCheckpoint
		return ac_OnPlayerEnterCheckpoint(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerEnterCheckpoint
    #undef OnPlayerEnterCheckpoint
#else
    #define _ALS_OnPlayerEnterCheckpoint
#endif
#if defined ac_OnPlayerEnterCheckpoint
	forward ac_OnPlayerEnterCheckpoint(playerid);
#endif
#define OnPlayerEnterCheckpoint ac_OnPlayerEnterCheckpoint

public OnPlayerLeaveCheckpoint(playerid)
{
    PublicFlood(playerid, 18);
	#if defined ac_OnPlayerLeaveCheckpoint
		return ac_OnPlayerLeaveCheckpoint(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerLeaveCheckpoint
    #undef OnPlayerLeaveCheckpoint
#else
    #define _ALS_OnPlayerLeaveCheckpoint
#endif
#if defined ac_OnPlayerLeaveCheckpoint
	forward ac_OnPlayerLeaveCheckpoint(playerid);
#endif
#define OnPlayerLeaveCheckpoint ac_OnPlayerLeaveCheckpoint

public OnPlayerEnterRaceCheckpoint(playerid)
{
    PublicFlood(playerid, 21);
	#if defined ac_OnPlayerEnterRaceCheckpoint
		return ac_OnPlayerEnterRaceCheckpoint(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerEnterRaceCP
    #undef OnPlayerEnterRaceCheckpoint
#else
    #define _ALS_OnPlayerEnterRaceCP
#endif
#if defined ac_OnPlayerEnterRaceCheckpoint
	forward ac_OnPlayerEnterRaceCheckpoint(playerid);
#endif
#define OnPlayerEnterRaceCheckpoint ac_OnPlayerEnterRaceCheckpoint

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    PublicFlood(playerid, 22);
	#if defined ac_OnPlayerLeaveRaceCheckpoint
		return ac_OnPlayerLeaveRaceCheckpoint(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerLeaveRaceCP
    #undef OnPlayerLeaveRaceCheckpoint
#else
    #define _ALS_OnPlayerLeaveRaceCP
#endif
#if defined ac_OnPlayerLeaveRaceCheckpoint
	forward ac_OnPlayerLeaveRaceCheckpoint(playerid);
#endif
#define OnPlayerLeaveRaceCheckpoint ac_OnPlayerLeaveRaceCheckpoint

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    PublicFlood(playerid, 23);
	#if defined ac_OnPlayerClickPlayerTextDraw
		return ac_OnPlayerClickPlayerTextDraw(playerid, playertextid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerClickPlayerTextD
    #undef OnPlayerClickPlayerTextDraw
#else
    #define _ALS_OnPlayerClickPlayerTextD
#endif
#if defined ac_OnPlayerClickPlayerTextDraw
	forward ac_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid);
#endif
#define OnPlayerClickPlayerTextDraw ac_OnPlayerClickPlayerTextDraw

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    PublicFlood(playerid, 25);
	#if defined ac_OnVehicleSirenStateChange
		return ac_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnVehicleSirenState
    #undef OnVehicleSirenStateChange
#else
    #define _ALS_OnVehicleSirenState
#endif
#if defined ac_OnVehicleSirenStateChange
	forward ac_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
#endif
#define OnVehicleSirenStateChange ac_OnVehicleSirenStateChange

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
    PublicFlood(playerid, 26);
	#if defined ac_OnPlayerSelectObject
		return ac_OnPlayerSelectObject(playerid, type, objectid, modelid, fX, fY, fZ);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerSelectObject
    #undef OnPlayerSelectObject
#else
    #define _ALS_OnPlayerSelectObject
#endif
#if defined ac_OnPlayerSelectObject
	forward ac_OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ);
#endif
#define OnPlayerSelectObject ac_OnPlayerSelectObject

#if defined OnPlayerCheatAC
	forward OnPlayerCheatAC(playerid, code[]);
#endif
#if defined OnPlayerWarningPanelAC
	forward OnPlayerWarningPanelAC(playerid, reason[]);
#endif
#if defined OnPlayerExitPausedAC
    forward OnPlayerExitPausedAC(playerid);
#endif
#if defined OnPlayerResetArmourAC
    forward OnPlayerResetArmourAC(playerid);
#endif
#if defined OnPlayerDamageStatusUpdateAC
    forward OnPlayerDamageStatusUpdateAC(playerid, hitid, &Float:dmg, &Float:arm, weaponid);
#endif
#if defined OnPlayerDeathFromWeaponAC
	forward OnPlayerDeathFromWeaponAC(playerid, killerid, reason);
#endif
